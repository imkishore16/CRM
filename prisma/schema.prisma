generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  name             String?
  organizationName String?
  email            String   @unique
  password         String?
  role             Role     @default(USER)
  avatar           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  id               Int      @id @default(autoincrement())
  createdSpaces    Space[]  @relation("createdBy")
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  meetings           Meeting[]
}

model Space {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation("createdBy", fields: [userId], references: [id])
  modelProvider String @default("gemini")

}

model SpaceCustomer {
  id                 Int                @id @default(autoincrement())
  spaceId            Int
  mobileNumber       String
  conversationStatus ConversationStatus 
}

model Conversation {
  id           Int      @id @default(autoincrement())
  spaceId      Int
  mobileNumber String
  sender  SenderType
  content String 
  createdAt    DateTime @default(now())
}

// model Message {
//   id Int @id @default(autoincrement())
//   spaceId      Int
//   conversationId Int
//   content  String
//   sender  SenderType
//   timestamp  DateTime @default(now())
//   conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
// }

enum SenderType {
  USER
  BOT
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CampaignStatus {
  NOT_STARTED
  ONGOING
  COMPLETED
}

enum ConversationStatus {
  NOT_STARTED
  ONGOING
  COMPLETED
}

enum Provider {
  Google
  Credentials
  Spotify
}

model Meeting {
  id          Int      @id @default(autoincrement())
  userId      Int
  eventId     String   @unique
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
